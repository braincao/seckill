<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
    <!--配置整合spring-mybatis过程,classpath就是java与resources下面的-->

    <!--1. 配置数据库相关参数 引入外部jdbc.properties属性文件，properties属性:${url}-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--2. 数据库连接池，这里为c3p0-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--配置连接池属性-->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--c3p0连接池私有属性，一般不配置，由于本案例高并发因此个性化配置-->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>

        <!--关闭连接后不自动commit，默认为false-->
        <property name="autoCommitOnClose" value="false"/>

        <!--获取连接超时时间-->
        <property name="checkoutTimeout" value="1000"/>

        <!--当获取连接失败重试次数-->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!--3. 配置sqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>

        <!--配置mybatis全局配置文件:mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

        <!--扫描entity包，方便在mapper.xml中直接使用类名-->
        <property name="typeAliasesPackage" value="com.braincao.entity"/>

        <!--扫描sql配置文件:mapper需要的xml文件，这样不用在mybatis-config.xml中一个一个添加mapper.xml-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--4. 配置扫描DAO接口包，动态实现DAO接口，注入到spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

        <!--给出需要扫描的DAO接口包-->
        <property name="basePackage" value="com.braincao.dao"/>
    </bean>

    <!--5. RedisDao-->
    <bean id="redisDao" class="com.braincao.dao.cache.RedisDao">
        <constructor-arg index="0" value="localhost"/>
        <constructor-arg index="1" value="6379"/>
    </bean>
</beans>

    <!--&lt;!&ndash; 配置Spring 的 jdbcTemplate &ndash;&gt;-->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash;配置事务管理器&ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--&lt;!&ndash;配置连接池&ndash;&gt;-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash;配置业务层的代理，对service进行增强(基于aop声明式事务管理)&ndash;&gt;-->
    <!--<bean id="accountServiceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">-->
        <!--&lt;!&ndash;目标对象&ndash;&gt;-->
        <!--<property name="target" ref="accountService"></property>-->
        <!--&lt;!&ndash;注入事务管理器&ndash;&gt;-->
        <!--<property name="transactionManager" ref="transactionManager"></property>-->
        <!--&lt;!&ndash;注入事务属性&ndash;&gt;-->
        <!--<property name="transactionAttributes">-->
            <!--<props>-->
                <!--&lt;!&ndash;-->
                    <!--prop的格式：-->
                        <!--* PROPAGATION   :事务的传播行为-->
                        <!--* ISOLATION     :事务的隔离级别-->
                        <!--* readOnly      :只读(不可以修改，插入，删除)-->
                        <!--* -Exception    :发生哪些异常事务回滚-->
                        <!--* +Exception    :发生哪些异常事务不会滚-->
                <!--&ndash;&gt;-->
                <!--&lt;!&ndash;<prop key="transfer">PROPAGATION_REQUIRED,readOnly,+java.lang.ArithmeticException</prop>&ndash;&gt;-->
                <!--<prop key="transfer">PROPAGATION_REQUIRED</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->
